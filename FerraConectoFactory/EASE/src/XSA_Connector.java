//import java.util.Hashtable;
//
//import br.com.dba.ease.EaseWSClientFacade;
//import framework.*;
//
//import funcoes.account.ListarAccount;
//import funcoes.account.AdicionarAccount;
//import funcoes.account.AtualizarAccount;
//import funcoes.account.DeletarAccount;
//
//import funcoes.connection.ListarConnection;
//import funcoes.connection.AdicionarConnection;
//import funcoes.connection.AtualizarConnection;
//import funcoes.connection.DeletarConnection;
//
//import funcoes.group.ListarGroup;
//
//
//public class XSA_Connector {
//
//    /**
//     *   THIS FUNCTION IS AUTOMATICALLY GENERATED BY THE XMODULE STUDIO
//     *         ************************************************
//     *         *** DO NOT MAKE ANY CHANGES TO THIS FUNCTION ***
//     *         ************************************************
//     *   Function name : ConnectorLoad
//     *   Description   : The function is called when the connector is loaded and it
//     *                   defines the hash tables and structure/custom keywords
//     */
//    public static int ConnectorLoad(Hashtable[] IN_hashes) {
//
//        String function = "ConnectorLoad"; // for debug messages
//        Hashtable XSA_OperationHash = IN_hashes[XSA_Framework.XSA_OPERATION_HASH];
//        Hashtable XSA_GetEntityHash = IN_hashes[XSA_Framework.XSA_GET_ENTITY_HASH];
//		//Donot change/delete this code
//		if(System.getProperty("os.name").equalsIgnoreCase("AIX"))
//			System.load(XSA_OperationHash.get(XSA_Framework.XSA_OP_WORK_DIR_STR).toString() +"/../../bin/BmcXagLangJava.so");
//        //End
//        // send a debug message when entering the function
//        XSA_Framework.XSA_WriteDebugEnter(XSA_Framework.XSA_DEBUG_DETAIL,function);
//
//        // send a debug message with the contents of the relevant hashtables
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_OperationHash", XSA_OperationHash);
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_GetEntityHash", XSA_GetEntityHash);
//
//        // update the dynamic hashtable with the implemented functions
//        XSA_Loader.UpdateLoader(IN_hashes);
//
//        int rc = XSA_Framework.XSA_WriteEntity(); // write this entity
//
//        // send a debug message when exiting the function
//        XSA_Framework.XSA_WriteDebugExit(XSA_Framework.XSA_DEBUG_DETAIL, function,rc);        return rc;
//
//    }
//
//    /*   @@@CONNECTOR_INIT_IMPLEMENTATION_START@@@   */
//    /**
//     *   Function name : ConnectorInit
//     *   Description   : Initializes the connector environment.
//     *                   Use this function to perform initialization tasks, such as initializing third party libraries, initializing variables,
//     *                   creating dynamic data structures..
//     */
//
//    public static int ConnectorInit(Hashtable[] IN_hashes) {
//
//        String function = "ConnectorInit"; // for debug messages
//        Hashtable XSA_OperationHash = IN_hashes[XSA_Framework.XSA_OPERATION_HASH];
//        Hashtable XSA_ContextHash   = IN_hashes[XSA_Framework.XSA_CONTEXT_HASH];
//
//        // send a debug message when entering the function
//        XSA_Framework.XSA_WriteDebugEnter(XSA_Framework.XSA_DEBUG_DETAIL,function);
//
//        // send a debug message with the contents of the relevant hashtables
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_OperationHash",  XSA_OperationHash);
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_ContextHash",    XSA_ContextHash);
//
//        int rc = XSA_Framework.XSA_RC_OK; // return code
//        String err = null;                // error description
//
//        // TODO: Initialize connector level variables function calls and settings.
//        //       If an error occurs put the error description in err.
//
//        // error handling
//        if (err != null) {
//            XSA_Framework.XSA_WriteMessage("Error: " + err);
//            rc = XSA_Framework.XSA_RC_ERROR;
//        }
//
//        // send a debug message when exiting the function
//        XSA_Framework.XSA_WriteDebugExit(XSA_Framework.XSA_DEBUG_DETAIL, function,rc);        return rc;
//    }
//
//    /*   @@@CONNECTOR_INIT_IMPLEMENTATION_END@@@    */
//
//    /*   @@@CONNECTOR_TERM_IMPLEMENTATION_START@@@   */
//    /**
//     *   Function name : ConnectorTerm
//     *   Description   : Cleans up and terminates the connector environment.
//     *                   Use this function to perform termination tasks, such as closing database connections,
//     *                  clear functions or deleting dynamic data structures before the connector is unloaded.
//     */
//
//    public static int ConnectorTerm(Hashtable [] IN_hashes) {
//
//        String function = "ConnectorTerm"; // for debug messages
//        Hashtable XSA_OperationHash = IN_hashes[XSA_Framework.XSA_OPERATION_HASH];
//        Hashtable XSA_ContextHash   = IN_hashes[XSA_Framework.XSA_CONTEXT_HASH];
//
//        // send a debug message when entering the function
//        XSA_Framework.XSA_WriteDebugEnter(XSA_Framework.XSA_DEBUG_DETAIL,function);
//
//        // send a debug message with the contents of the relevant hashtables
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_OperationHash",  XSA_OperationHash);
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_ContextHash",    XSA_ContextHash);
//
//        int rc = XSA_Framework.XSA_RC_OK; // return code
//        String err = null;                // error description
//
//        // TODO: Clear connector level variables, call connector level termination functions
//
//        // error handling
//        if (err != null) {
//            XSA_Framework.XSA_WriteMessage("Error: " + err);
//            rc = XSA_Framework.XSA_RC_ERROR;
//        }
//
//        // send a debug message when exiting the function
//        XSA_Framework.XSA_WriteDebugExit(XSA_Framework.XSA_DEBUG_DETAIL, function,rc);
//        return rc;
//    }
//    /*    @@@CONNECTOR_TERM_IMPLEMENTATION_END@@@    */
//
//    /*   @@@SESSION_INIT_IMPLEMENTATION_START@@@   */
//    /**
//     *   Function name : SessionInit
//     *   Description   : Logs in an administrator for the first time and initializes
//     *                   an administrator session
//     */
//    public static int SessionInit(Hashtable[] IN_hashes) {
//
//        String function = "SessionInit"; // for debug messages
//        Hashtable XSA_OperationHash = IN_hashes[XSA_Framework.XSA_OPERATION_HASH];
//        Hashtable XSA_ContextHash   = IN_hashes[XSA_Framework.XSA_CONTEXT_HASH];
//
//        // send a debug message when entering the function
//        XSA_Framework.XSA_WriteDebugEnter(XSA_Framework.XSA_DEBUG_DETAIL,function);
//
//        // send a debug message with the contents of the relevant hashtables
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_OperationHash",  XSA_OperationHash);
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_ContextHash",    XSA_ContextHash);
//
//        int rc = XSA_Framework.XSA_RC_OK; // return code
//
//        String wsdl = "";
//        String login = "";
//        String password = "";
//        
//        try {
//            login = XSA_OperationHash.get("XSA_ADMIN_ID").toString();//"S909090"
//        } catch ( NullPointerException npe ) {
//            XSA_Framework.XSA_WriteMessage("SessionInit Error: XSA_ADMIN_ID not found in XSA_OPERATION_HASH");
//            rc = XSA_Framework.XSA_RC_ERROR;
//        }
//        
//        try {
//            password = XSA_OperationHash.get("XSA_ADMIN_PASSWORD").toString();//"202530"
//        } catch ( NullPointerException npe ) {
//            XSA_Framework.XSA_WriteMessage("SessionInit Error: XSA_ADMIN_PASSWORD not found in XSA_OPERATION_HASH");
//            rc = XSA_Framework.XSA_RC_ERROR;
//        }
//        
//        try {
//            wsdl = XSA_Framework.XSA_ReadParam("EASE_WSDL").toString();
//        } catch ( NullPointerException npe ) {
//            XSA_Framework.XSA_WriteMessage("SessionInit Error: EASE_WSDL not found in XSA_OPERATION_HASH");
//            rc = XSA_Framework.XSA_RC_ERROR;
//        }
//        
//        try {
//            EaseWSClientFacade.init( login, password, wsdl );
//        } catch (Exception e) {
//            XSA_Framework.XSA_WriteMessage("SessionInit Error: " + e.getMessage());
//            rc = XSA_Framework.XSA_RC_ERROR;
//        }
//
//        // send a debug message when exiting the function
//        XSA_Framework.XSA_WriteDebugExit(XSA_Framework.XSA_DEBUG_DETAIL, function,rc);        return rc;
//    }
//    /*   @@@SESSION_INIT_IMPLEMENTATION_END@@@    */
//
//    /*   @@@SESSION_TERM_IMPLEMENTATION_START@@@   */
//    /**
//     *   Function name : SessionTerm
//     *   Description   : Terminates the administrator session based on the connector session scope
//     */
//    public static int SessionTerm(Hashtable [] IN_hashes) {
//
//        String function = "SessionTerm"; // for debug messages
//        Hashtable XSA_OperationHash = IN_hashes[XSA_Framework.XSA_OPERATION_HASH];
//        Hashtable XSA_ContextHash   = IN_hashes[XSA_Framework.XSA_CONTEXT_HASH];
//
//        // send a debug message when entering the function
//        XSA_Framework.XSA_WriteDebugEnter(XSA_Framework.XSA_DEBUG_DETAIL,function);
//
//        // send a debug message with the contents of the relevant hashtables
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_OperationHash",  XSA_OperationHash);
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_ContextHash",    XSA_ContextHash);
//
//        int rc = XSA_Framework.XSA_RC_OK; // return code
//        String err = null;                // error description
//
//        // TODO: Terminate the administrator session.
//        //       If an error occurs put the error description in err.
//
//        // error handling
//        if (err != null) {
//            XSA_Framework.XSA_WriteMessage("Error: " + err);
//            rc = XSA_Framework.XSA_RC_ERROR;
//        }
//
//        // send a debug message when exiting the function
//        XSA_Framework.XSA_WriteDebugExit(XSA_Framework.XSA_DEBUG_DETAIL, function,rc);
//        return rc;
//    }
//    /*    @@@SESSION_TERM_IMPLEMENTATION_END@@@    */
//
//
//    /*   @@@TRANSACTION_START_IMPLEMENTATION_START@@@   */
//    /**
//     *   Function name : TransactionStart
//     *   Description   : The function is called at the start of every transaction,
//     *                   and can be used to initialize the transaction environment.
//     */
//    public static int TransactionStart(Hashtable[] IN_hashes)
//    {
//
//        String function = "TransactionStart"; // for debug messages
//        Hashtable XSA_OperationHash = IN_hashes[XSA_Framework.XSA_OPERATION_HASH];
//        Hashtable XSA_ContextHash = IN_hashes[XSA_Framework.XSA_CONTEXT_HASH];
//
//        // send a debug message when entering the function
//        XSA_Framework.XSA_WriteDebugEnter(XSA_Framework.XSA_DEBUG_DETAIL,function);
//
//	// send a debug message with the contents of the relevant hashtables
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_OperationHash", XSA_OperationHash);
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_ContextHash", XSA_ContextHash);
//
//        int rc = XSA_Framework.XSA_RC_OK; // return code
//	//todo initialize transaction related variables functions and settings,
//        //put values used during the the transaction on the transaction context.
//
//        // send a debug message when exiting the function
//        XSA_Framework.XSA_WriteDebugExit(XSA_Framework.XSA_DEBUG_DETAIL, function,rc);        return rc;
//    }
//    /*   @@@TRANSACTION_START_IMPLEMENTATION_END@@@    */
//
//
//     /*   @@@TRANSACTION_END_IMPLEMENTATION_START@@@   */
//    /**
//     *   Function name : TransactionEnd
//     *   Description   : The function is called at the end of every transaction,
//     *                   and can be used to terminate the transaction environment.
//     */
//    public static int TransactionEnd(Hashtable[] IN_hashes)
//    {
//
//        String function = "TransactionEnd"; // for debug messages
//        Hashtable XSA_OperationHash = IN_hashes[XSA_Framework.XSA_OPERATION_HASH];
//        Hashtable XSA_ContextHash = IN_hashes[XSA_Framework.XSA_CONTEXT_HASH];
//
//        // send a debug message when entering the function
//        XSA_Framework.XSA_WriteDebugEnter(XSA_Framework.XSA_DEBUG_DETAIL,function);
//
//        // send a debug message with the contents of the relevant hashtables
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_OperationHash", XSA_OperationHash);
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_ContextHash", XSA_ContextHash);
//
//        int rc = XSA_Framework.XSA_RC_OK; // return code
//	//Todo Terminate transaction related variables functions and settings,
//        //Close handles put on the transaction context and clear needed variables and settings.
//
//        // send a debug message when exiting the function
//        XSA_Framework.XSA_WriteDebugExit(XSA_Framework.XSA_DEBUG_DETAIL, function,rc);
//        return rc;
//    }
//
//    /*    @@@TRANSACTION_END_IMPLEMENTATION_END@@@    */
//
//
//    /*   @@@SYSTEM_INIT_IMPLEMENTATION_START@@@   */
//    /**
//     *   Function name : ManageSystemInit
//     *   Description   : Initializes the connector Managed System environment
//     */
//    public static int ManageSystemInit(Hashtable[] IN_hashes)
//    {
//
//        String function = "ManageSystemInit"; // for debug messages
//        Hashtable XSA_OperationHash = IN_hashes[XSA_Framework.XSA_OPERATION_HASH];
//        Hashtable XSA_ContextHash = IN_hashes[XSA_Framework.XSA_CONTEXT_HASH];
//
//        // send a debug message when entering the function
//        XSA_Framework.XSA_WriteDebugEnter(XSA_Framework.XSA_DEBUG_DETAIL,function);
//
//        // send a debug message with the contents of the relevant hashtables
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_OperationHash", XSA_OperationHash);
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_ContextHash", XSA_ContextHash);
//
//        int rc = XSA_Framework.XSA_RC_OK; // return code
//
//        //Todo Initialize Managed System related variables, sessions, handles and functions,
//	//put info on the Managed System Context.
//
//        // send a debug message when exiting the function
//        XSA_Framework.XSA_WriteDebugExit(XSA_Framework.XSA_DEBUG_DETAIL, function,rc);        return rc;
//    }
//    /*   @@@SYSTEM_INIT_IMPLEMENTATION_END@@@    */
//
//
//     /*   @@@SYSTEM_TERM_IMPLEMENTATION_START@@@   */
//    /**
//     *   Function name : ManageSystemTerm
//     *   Description   : Cleans up and terminates the connector Managed System environment.
//     */
//    public static int ManageSystemTerm(Hashtable[] IN_hashes)
//    {
//
//        String function = "ManageSystemTerm"; // for debug messages
//        Hashtable XSA_OperationHash = IN_hashes[XSA_Framework.XSA_OPERATION_HASH];
//        Hashtable XSA_ContextHash = IN_hashes[XSA_Framework.XSA_CONTEXT_HASH];
//
//        // send a debug message when entering the function
//        XSA_Framework.XSA_WriteDebugEnter(XSA_Framework.XSA_DEBUG_DETAIL,function);
//
//        // send a debug message with the contents of the relevant hashtables
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_OperationHash", XSA_OperationHash);
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_ContextHash", XSA_ContextHash);
//
//        int rc = XSA_Framework.XSA_RC_OK; // return code
//
//        ///////////////////////////////////////////////////////////////////////////////////////////
//        // Terminate the Managed System Context
//        ///////////////////////////////////////////////////////////////////////////////////////////
//        //Todo Terminate Managed System related variables, sessions, handles and functions,
//	//Managed System Context is erased after this function call exits
//
//       // send a debug message when exiting the function
//       XSA_Framework.XSA_WriteDebugExit(XSA_Framework.XSA_DEBUG_DETAIL, function,rc);
//        return rc;
//    }
//    /*    @@@SYSTEM_TERM_IMPLEMENTATION_END@@@    */
//
//
//    /*   @@@SYSTEM_PROPERTIES_GET_IMPLEMENTATION_START@@@   */
//    /**
//     *   Function name : SystemPropertiesGet
//     *   Description   : Retrieves the Managed System properties
//     */
//    public static int SystemPropertiesGet(Hashtable[] IN_hashes) {
//
//        String function = "SystemPropertiesGet"; // for debug messages
//        Hashtable XSA_OperationHash = IN_hashes[XSA_Framework.XSA_OPERATION_HASH];
//        Hashtable XSA_ContextHash   = IN_hashes[XSA_Framework.XSA_CONTEXT_HASH];
//        Hashtable XSA_GetEntityHash = IN_hashes[XSA_Framework.XSA_GET_ENTITY_HASH];
//
//        // send a debug message when entering the function
//        XSA_Framework.XSA_WriteDebugEnter(XSA_Framework.XSA_DEBUG_DETAIL,function);
//
//        // send a debug message with the contents of the relevant hashtables
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_OperationHash", XSA_OperationHash);
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_ContextHash",   XSA_ContextHash);
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_GetEntityHash", XSA_GetEntityHash);
//
//        int rc = XSA_Framework.XSA_RC_OK; // return code
//        String err = null;                // error description
//
//        // TODO: Retrieve the Managed System's properties and fill XSA_GetEntityHash with the relevant data.
//        //       If an error occurs put the error description in err.
//
//        // error handling
//        if (err != null) {
//            XSA_Framework.XSA_WriteMessage("Error: " + err);
//            rc = XSA_Framework.XSA_RC_ERROR;
//        }
//
//        // add the entity data to the response
//        if (rc == XSA_Framework.XSA_RC_OK) {
//            rc = XSA_Framework.XSA_WriteEntity();
//        }
//
//        // send a debug message when exiting the function
//        XSA_Framework.XSA_WriteDebugExit(XSA_Framework.XSA_DEBUG_DETAIL, function,rc);        return rc;
//    }
//    /*   @@@SYSTEM_PROPERTIES_GET_IMPLEMENTATION_END@@@    */
//
//    /*   @@@SYSTEM_PROPERTIES_SET_IMPLEMENTATION_START@@@   */
//    /**
//     *   Function name : SystemPropertiesSet
//     *   Description   : Sets the Managed System properties
//     */
//    public static int SystemPropertiesSet(Hashtable[] IN_hashes) {
//
//        String function = "SystemPropertiesSet"; // for debug messages
//        Hashtable XSA_OperationHash = IN_hashes[XSA_Framework.XSA_OPERATION_HASH];
//        Hashtable XSA_ContextHash   = IN_hashes[XSA_Framework.XSA_CONTEXT_HASH];
//        Hashtable XSA_SetKwdsHash   = IN_hashes[XSA_Framework.XSA_SET_KWDS_HASH];
//
//        // send a debug message when entering the function
//        XSA_Framework.XSA_WriteDebugEnter(XSA_Framework.XSA_DEBUG_DETAIL,function);
//
//        // send a debug message with the contents of the relevant hashtables
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_OperationHash", XSA_OperationHash);
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_ContextHash",   XSA_ContextHash);
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_SetKwdsHash",   XSA_SetKwdsHash);
//
//        int rc = XSA_Framework.XSA_RC_OK; // return code
//        String err = null;                // error description
//
//        // TODO: Update the Managed System Properties with the XSA_SetKwdsHash data.
//        //       If an error occurs put the error description in err.
//
//        // error handling
//        if (err != null) {
//            XSA_Framework.XSA_WriteMessage("Error: " + err);
//            rc = XSA_Framework.XSA_RC_ERROR;
//        }
//
//        // send a debug message when exiting the function
//        XSA_Framework.XSA_WriteDebugExit(XSA_Framework.XSA_DEBUG_DETAIL, function,rc);        return rc;
//    }
//    /*   @@@SYSTEM_PROPERTIES_SET_IMPLEMENTATION_END@@@    */
//
//    /*   @@@SYSTEM_ACTIVE_QUERY_IMPLEMENTATION_START@@@   */
//    /**
//     *   Function name : SystemActiveQuery
//     *   Description   : Verifies whether the Managed System is currently active
//     */
//    public static int SystemActiveQuery(Hashtable[] IN_hashes) {
//
//        String function = "SystemActiveQuery"; // for debug messages
//        Hashtable XSA_OperationHash = IN_hashes[XSA_Framework.XSA_OPERATION_HASH];
//        Hashtable XSA_ContextHash   = IN_hashes[XSA_Framework.XSA_CONTEXT_HASH];
//
//        // send a debug message when entering the function
//        XSA_Framework.XSA_WriteDebugEnter(XSA_Framework.XSA_DEBUG_DETAIL,function);
//
//        // send a debug message with the contents of the relevant hashtables
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_OperationHash", XSA_OperationHash);
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_ContextHash",   XSA_ContextHash);
//
//        int rc = XSA_Framework.XSA_RC_OK; // return code
//        String err = null;                // error description
//
//        // TODO: Check if the Managed System is up and running.
//        //       Set rc to XSA_Framework.XSA_RC_OK         if system is active
//        //       Set rc to XSA_Framework.XSA_RC_NOT_ACTIVE if system is not active
//        //       If an error occurs put the error description in err.
//
//        // error handling
//        if (err != null) {
//            XSA_Framework.XSA_WriteMessage("Error: " + err);
//            rc = XSA_Framework.XSA_RC_ERROR;
//        }
//
//        // send a debug message when exiting the function
//        XSA_Framework.XSA_WriteDebugExit(XSA_Framework.XSA_DEBUG_DETAIL, function,rc);        return rc;
//    }
//    /*   @@@SYSTEM_ACTIVE_QUERY_IMPLEMENTATION_END@@@    */
//
//    /*   @@@ACCOUNT_GET_IMPLEMENTATION_START@@@    */
//    /**
//     *   Function name : AccountGet
//     *   Description   : Retrieves Accounts from the Managed System
//     */
//    public static int AccountGet(Hashtable [] IN_hashes) {
//	 return ListarAccount.accountGet(IN_hashes);
//    }
//    /*   @@@ACCOUNT_GET_IMPLEMENTATION_END@@@    */
//
//    /*   @@@ACCOUNT_ADD_IMPLEMENTATION_START@@@    */
//    /**
//     *   Function name : AccountAdd
//     *   Description   : Creates a new Account on the Managed System
//     */
//    public static int AccountAdd(Hashtable[] IN_hashes) {
//	 return AdicionarAccount.accountAdd(IN_hashes);
//    }
//    /*   @@@ACCOUNT_ADD_IMPLEMENTATION_END@@@    */
//
//    /*   @@@ACCOUNT_UPDATE_IMPLEMENTATION_START@@@    */
//    /**
//     *   Function name : AccountUpdate
//     *   Description   : Updates the details of an existing Account on the Managed System
//     */
//     public static int AccountUpdate(Hashtable[] IN_hashes) {
//	 return AtualizarAccount.accountUpdate(IN_hashes);
//     }
//     /*   @@@ACCOUNT_UPDATE_IMPLEMENTATION_END@@@    */
//
//	/*   @@@ACCOUNT_DELETE_IMPLEMENTATION_START@@@    */
//    /**
//     *   Function name : AccountDelete
//     *   Description   : Deletes an Account from the Managed System
//     */
//     public static int AccountDelete(Hashtable[] IN_hashes) {
//         return DeletarAccount.accountDelete(IN_hashes);
//     }
//    /*   @@@ACCOUNT_DELETE_IMPLEMENTATION_END@@@    */
//
//    /*   @@@VERIFY_ACCOUNT_PASSWORD_IMPLEMENTATION_START@@@    */
//    /**
//     *   Function name : VerifyAccountPassword
//     *   Description   : Verify Password for an Account on the Managed System
//     */
//  public static int VerifyAccountPassword(Hashtable [] IN_hashes) {
//
//        String function = "VerifyAccountPassword"; // for debug messages
//        Hashtable XSA_OperationHash = IN_hashes[XSA_Framework.XSA_OPERATION_HASH];
//        Hashtable XSA_ContextHash = IN_hashes[XSA_Framework.XSA_CONTEXT_HASH];
//        Hashtable XSA_GetSearchHash = IN_hashes[XSA_Framework.XSA_GET_SEARCH_HASH];
//
//        // send a debug message when entering the function
//        XSA_Framework.XSA_WriteDebugEnter(XSA_Framework.XSA_DEBUG_DETAIL, function);
//
//        // send a debug message with the contents of the relevant hashtables
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_OperationHash", XSA_OperationHash);
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_ContextHash", XSA_ContextHash);
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_GetSearchHash", XSA_GetSearchHash);
//
//        int rc = XSA_Framework.XSA_RC_ERROR; // return code
//        String err = null;
//	    //Todo Take Account ID ,Password and keywords from XSA_GetSearchHash.
//	    //     Verify the Account Password
//        //     For Password verified return XSA_RC_OK
//        //     For Password Not Verified return  XSA_RC_ERROR
//	    //
//        //     If an error occurs put the error description in err.
//
//        // error handling
//        if (err != null) {
//            XSA_Framework.XSA_WriteMessage("Error: " + err);
//            rc = XSA_Framework.XSA_RC_ERROR;
//        }
//
//        // send a debug message when exiting the function
//        XSA_Framework.XSA_WriteDebugExit(XSA_Framework.XSA_DEBUG_DETAIL, function,rc);
//        return rc;
//    }
//
//    /*   @@@VERIFY_ACCOUNT_PASSWORD_IMPLEMENTATION_END@@@    */
//
//
//    /*   @@@VERIFY_ADMIN_PASSWORD_IMPLEMENTATION_START@@@    */
//    /**
//     *   Function name : VerifyAdminPassword
//     *   Description   : Verify Password for an Admin on the Managed System
//     *                  This function is called when an AddRSSAdmin or UpdRssAdmin
//     *                  transaction is handled by the Services Manager.
//     */
//  public static int VerifyAdminPassword(Hashtable [] IN_hashes) {
//
//        String function = "VerifyAdminPassword"; // for debug messages
//        Hashtable XSA_OperationHash = IN_hashes[XSA_Framework.XSA_OPERATION_HASH];
//        Hashtable XSA_ContextHash = IN_hashes[XSA_Framework.XSA_CONTEXT_HASH];
//        Hashtable XSA_GetSearchHash = IN_hashes[XSA_Framework.XSA_GET_SEARCH_HASH];
//
//        // send a debug message when entering the function
//        XSA_Framework.XSA_WriteDebugEnter(XSA_Framework.XSA_DEBUG_DETAIL, function);
//
//        // send a debug message with the contents of the relevant hashtables
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_OperationHash", XSA_OperationHash);
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_ContextHash", XSA_ContextHash);
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_GetSearchHash", XSA_GetSearchHash);
//
//        int rc = XSA_Framework.XSA_RC_ERROR; // return code
//
//        try {
//
//            String login    = (String) XSA_GetSearchHash.get("XSA_ACCOUNT_NAME");//"S909090"
//            String password = (String) XSA_GetSearchHash.get("XSA_PASSWORD");//"202530"
//            String wsdl     = (String) XSA_Framework.XSA_ReadParam("EASE_WSDL");
//
//            rc = EaseWSClientFacade.testConnection( login, password, wsdl );
//            
//        } catch ( Exception e ) {
//            XSA_Framework.XSA_WriteMessage("Error: " + e);
//            rc = XSA_Framework.XSA_RC_ERROR;
//        }
//
//        // send a debug message when exiting the function
//        XSA_Framework.XSA_WriteDebugExit(XSA_Framework.XSA_DEBUG_DETAIL, function,rc);
//        return rc;
//    }
//
//    /*   @@@VERIFY_ADMIN_PASSWORD_IMPLEMENTATION_END@@@    */
//
//    /*   @@@GROUP_GET_IMPLEMENTATION_START@@@    */
//    /**
//     *   Function name : GroupGet
//     *   Description   : Retrieves Groups from the Managed System
//     */
//     public static int GroupGet(Hashtable[] IN_hashes) {
//	 return ListarGroup.groupGet(IN_hashes);
//     }
//    /*   @@@GROUP_GET_IMPLEMENTATION_END@@@    */
//
//    /*   @@@GROUP_ADD_IMPLEMENTATION_START@@@    */
//    /**
//     *   Function name : GroupAdd
//     *   Description   : Creates a new Group on the Managed System
//     */
//  public static int GroupAdd(Hashtable [] IN_hashes) {
//
//        String function = "GroupAdd"; // for debug messages
//        Hashtable XSA_OperationHash = IN_hashes[XSA_Framework.XSA_OPERATION_HASH];
//        Hashtable XSA_ContextHash   = IN_hashes[XSA_Framework.XSA_CONTEXT_HASH];
//        Hashtable XSA_SetIdHash     = IN_hashes[XSA_Framework.XSA_SET_ID_HASH];
//        Hashtable XSA_SetKwdsHash   = IN_hashes[XSA_Framework.XSA_SET_KWDS_HASH];
//
//        // send a debug message when entering the function
//        XSA_Framework.XSA_WriteDebugEnter(XSA_Framework.XSA_DEBUG_DETAIL,function);
//
//        // send a debug message with the contents of the relevant hashtables
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_OperationHash", XSA_OperationHash);
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_ContextHash",   XSA_ContextHash);
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_SetIdHash",     XSA_SetIdHash);
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_SetKwdsHash",   XSA_SetKwdsHash);
//
//        int rc = XSA_Framework.XSA_RC_OK; // return code
//        String err = null;                // error description
//
//        // TODO: Create a new entity with ID taken from XSA_SetIdHash and data from XSA_SetKwdsHash.
//        //       If an error occurs put the error description in err.
//
//        // error handling
//        if (err != null) {
//            XSA_Framework.XSA_WriteMessage("Error: " + err);
//            rc = XSA_Framework.XSA_RC_ERROR;
//        }
//
//        // send a debug message when exiting the function
//        XSA_Framework.XSA_WriteDebugExit(XSA_Framework.XSA_DEBUG_DETAIL, function,rc);        return rc;
//    }
//    /*   @@@GROUP_ADD_IMPLEMENTATION_END@@@    */
//
//    /*   @@@GROUP_UPDATE_IMPLEMENTATION_START@@@    */
//    /**
//     *   Function name : GroupUpdate
//     *   Description   : Updates the details of an existing Group on the Managed System
//     */
//  public static int GroupUpdate(Hashtable [] IN_hashes) {
//
//        String function = "GroupUpdate"; // for debug messages
//        Hashtable XSA_OperationHash = IN_hashes[XSA_Framework.XSA_OPERATION_HASH];
//        Hashtable XSA_ContextHash   = IN_hashes[XSA_Framework.XSA_CONTEXT_HASH];
//        Hashtable XSA_SetIdHash     = IN_hashes[XSA_Framework.XSA_SET_ID_HASH];
//        Hashtable XSA_SetKwdsHash   = IN_hashes[XSA_Framework.XSA_SET_KWDS_HASH];
//
//        // send a debug message when entering the function
//        XSA_Framework.XSA_WriteDebugEnter(XSA_Framework.XSA_DEBUG_DETAIL,function);
//
//        // send a debug message with the contents of the relevant hashtables
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_OperationHash", XSA_OperationHash);
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_ContextHash",   XSA_ContextHash);
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_SetIdHash",     XSA_SetIdHash);
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_SetKwdsHash",   XSA_SetKwdsHash);
//
//        int rc = XSA_Framework.XSA_RC_OK; // return code
//        String err = null;                // error description
//
//        // TODO: Update the entity with ID taken from XSA_SetIdHash with the data from XSA_SetKwdsHash.
//        //       If an error occurs put the error description in err.
//
//        // error handling
//        if (err != null) {
//            XSA_Framework.XSA_WriteMessage("Error: " + err);
//            rc = XSA_Framework.XSA_RC_ERROR;
//        }
//
//        // send a debug message when exiting the function
//        XSA_Framework.XSA_WriteDebugExit(XSA_Framework.XSA_DEBUG_DETAIL, function,rc);        return rc;
//    }
//    /*   @@@GROUP_UPDATE_IMPLEMENTATION_END@@@    */
//
//    /*   @@@GROUP_DELETE_IMPLEMENTATION_START@@@    */
//    /**
//     *   Function name : GroupDelete
//     *   Description   : Deletes a Group from the Managed System
//     */
//  public static int GroupDelete(Hashtable [] IN_hashes) {
//
//        String function = "GroupDelete"; // for debug messages
//        Hashtable XSA_OperationHash = IN_hashes[XSA_Framework.XSA_OPERATION_HASH];
//        Hashtable XSA_ContextHash   = IN_hashes[XSA_Framework.XSA_CONTEXT_HASH];
//        Hashtable XSA_SetIdHash     = IN_hashes[XSA_Framework.XSA_SET_ID_HASH];
//        Hashtable XSA_SetKwdsHash   = IN_hashes[XSA_Framework.XSA_SET_KWDS_HASH];
//
//        // send a debug message when entering the function
//        XSA_Framework.XSA_WriteDebugEnter(XSA_Framework.XSA_DEBUG_DETAIL,function);
//
//        // send a debug message with the contents of the relevant hashtables
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_OperationHash", XSA_OperationHash);
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_ContextHash",   XSA_ContextHash);
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_SetIdHash",     XSA_SetIdHash);
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_SetKwdsHash",   XSA_SetKwdsHash);
//
//        int rc = XSA_Framework.XSA_RC_OK; // return code
//        String err = null;                // error description
//
//        // TODO: Delete the entity with ID taken from XSA_SetIdHash.
//        //       If an error occurs put the error description in err.
//
//        // error handling
//        if (err != null) {
//            XSA_Framework.XSA_WriteMessage("Error: " + err);
//            rc = XSA_Framework.XSA_RC_ERROR;
//        }
//
//        // send a debug message when exiting the function
//        XSA_Framework.XSA_WriteDebugExit(XSA_Framework.XSA_DEBUG_DETAIL, function,rc);        return rc;
//    }
//    /*   @@@GROUP_DELETE_IMPLEMENTATION_END@@@    */
//
//    /*   @@@CONNECTION_GET_IMPLEMENTATION_START@@@    */
//    /**
//     *   Function name : ConnectionGet
//     *   Description   : Retrieves Account to Group Connections from the Managed System
//     */
//    public static int ConnectionGet(Hashtable[] IN_hashes) {
//        return ListarConnection.connectionGet(IN_hashes);
//    }
//    /*   @@@CONNECTION_GET_IMPLEMENTATION_END@@@    */
//
//    /*   @@@CONNECTION_ADD_IMPLEMENTATION_START@@@    */
//    /**
//     *   Function name : ConnectionAdd
//     *   Description   : Creates a new Connection between an Account and a Group on the Managed System
//     */
//    public static int ConnectionAdd(Hashtable[] IN_hashes) {
//        return AdicionarConnection.connectionAdd(IN_hashes);
//    }
//    /*   @@@CONNECTION_ADD_IMPLEMENTATION_END@@@    */
//
//    /*   @@@CONNECTION_UPDATE_IMPLEMENTATION_START@@@    */
//    /**
//     *   Function name : ConnectionUpdate
//     *   Description   : Updates the details of an existing Connection between an Account
//     *                   and a Group on the Managed System
//     */
//    public static int ConnectionUpdate(Hashtable[] IN_hashes) {
//	return AtualizarConnection.atualizarConnection(IN_hashes);
//    }
//    /*   @@@CONNECTION_UPDATE_IMPLEMENTATION_END@@@    */
//
//    /*   @@@CONNECTION_DELETE_IMPLEMENTATION_START@@@    */
//    /**
//     *   Function name : ConnectionDelete
//     *   Description   : Deletes a Connection between an Account and a Group from the Managed System
//     */
//    public static int ConnectionDelete(Hashtable[] IN_hashes) {
//        return DeletarConnection.connectionDelete(IN_hashes);
//    }
//    /*   @@@CONNECTION_DELETE_IMPLEMENTATION_END@@@    */
//
//    /*   @@@CONNECTION_DELETE_IMPLEMENTATION_END@@@    */
//    /*   @@@CONTAINER_GET_IMPLEMENTATION_START@@@    */
//    /**
//     *   Function name : ContainerGet
//     *   Description   : Retrieves Containers from the Managed System
//     */
//    public static int ContainerGet(Hashtable[] IN_hashes)
//    {
//        String function = "ContainerGet"; // for debug messages
//        Hashtable XSA_OperationHash = IN_hashes[XSA_Framework.XSA_OPERATION_HASH];
//        Hashtable XSA_ContextHash   = IN_hashes[XSA_Framework.XSA_CONTEXT_HASH];
//        Hashtable XSA_GetSearchHash = IN_hashes[XSA_Framework.XSA_GET_SEARCH_HASH];
//        Hashtable XSA_GetEntityHash = IN_hashes[XSA_Framework.XSA_GET_ENTITY_HASH];
//
//        // send a debug message when entering the function
//        XSA_Framework.XSA_WriteDebugEnter(XSA_Framework.XSA_DEBUG_DETAIL,function);
//
//        // send a debug message with the contents of the relevant hashtables
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_OperationHash", XSA_OperationHash);
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_ContextHash",   XSA_ContextHash);
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_GetSearchHash", XSA_GetSearchHash);
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_GetEntityHash", XSA_GetEntityHash);
//
//        int rc = XSA_Framework.XSA_RC_OK; // return code
//        String err = null;                // error description
//
//        // TODO: Retrieve the entities in the Managed System that match the search criteria in XSA_GetSearchHash.
//        //       Fill XSA_GetEntityHash with the relevant data for each entity.
//        //       If an error occurs put the error description in err.
//
//        // TODO: Use the following code once for each entity retrieved, to add the entity data to the response.
//        if (rc == XSA_Framework.XSA_RC_OK) {
//            rc = XSA_Framework.XSA_WriteEntity();
//        }
//
//        // error handling
//        if (err != null) {
//            XSA_Framework.XSA_WriteMessage("Error: " + err);
//            rc = XSA_Framework.XSA_RC_ERROR;
//        }
//
//        // send a debug message when exiting the function
//        XSA_Framework.XSA_WriteDebugExit(XSA_Framework.XSA_DEBUG_DETAIL, function,rc);
//        return rc;
//    }
//
//    /*   @@@CONTAINER_GET_IMPLEMENTATION_END@@@    */
//
//    /*   @@@CONTAINER_ADD_IMPLEMENTATION_START@@@    */
//    /**
//     *   Function name : ContainerAdd
//     *   Description   : Creates a new Container on the Managed System
//     */
//    public static int ContainerAdd(Hashtable[] IN_hashes)
//    {
//        String function = "ContainerAdd"; // for debug messages
//        Hashtable XSA_OperationHash = IN_hashes[XSA_Framework.XSA_OPERATION_HASH];
//        Hashtable XSA_ContextHash   = IN_hashes[XSA_Framework.XSA_CONTEXT_HASH];
//        Hashtable XSA_SetIdHash     = IN_hashes[XSA_Framework.XSA_SET_ID_HASH];
//        Hashtable XSA_SetKwdsHash   = IN_hashes[XSA_Framework.XSA_SET_KWDS_HASH];
//
//        // send a debug message when entering the function
//        XSA_Framework.XSA_WriteDebugEnter(XSA_Framework.XSA_DEBUG_DETAIL,function);
//
//        // send a debug message with the contents of the relevant hashtables
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_OperationHash", XSA_OperationHash);
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_ContextHash",   XSA_ContextHash);
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_SetIdHash",     XSA_SetIdHash);
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_SetKwdsHash",   XSA_SetKwdsHash);
//
//        int rc = XSA_Framework.XSA_RC_OK; // return code
//        String err = null;                // error description
//
//        // TODO: Create a new entity with ID taken from XSA_SetIdHash and data from XSA_SetKwdsHash.
//        //       If an error occurs put the error description in err.
//
//        // error handling
//        if (err != null) {
//            XSA_Framework.XSA_WriteMessage("Error: " + err);
//            rc = XSA_Framework.XSA_RC_ERROR;
//        }
//
//        // send a debug message when exiting the function
//        XSA_Framework.XSA_WriteDebugExit(XSA_Framework.XSA_DEBUG_DETAIL, function,rc);
//        return rc;
//    }
//    /*   @@@CONTAINER_ADD_IMPLEMENTATION_END@@@    */
//
//    /*   @@@CONTAINER_UPDATE_IMPLEMENTATION_START@@@    */
//    /**
//     *   Function name : ContainerUpdate
//     *   Description   : Updates the details of an existing Container on the Managed System
//     */
//    public static int ContainerUpdate(Hashtable[] IN_hashes)
//    {
//
//        String function = "ContainerUpdate"; // for debug messages
//        Hashtable XSA_OperationHash = IN_hashes[XSA_Framework.XSA_OPERATION_HASH];
//        Hashtable XSA_ContextHash   = IN_hashes[XSA_Framework.XSA_CONTEXT_HASH];
//        Hashtable XSA_SetIdHash     = IN_hashes[XSA_Framework.XSA_SET_ID_HASH];
//        Hashtable XSA_SetKwdsHash   = IN_hashes[XSA_Framework.XSA_SET_KWDS_HASH];
//
//        // send a debug message when entering the function
//        XSA_Framework.XSA_WriteDebugEnter(XSA_Framework.XSA_DEBUG_DETAIL,function);
//
//        // send a debug message with the contents of the relevant hashtables
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_OperationHash", XSA_OperationHash);
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_ContextHash",   XSA_ContextHash);
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_SetIdHash",     XSA_SetIdHash);
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_SetKwdsHash",   XSA_SetKwdsHash);
//
//        int rc = XSA_Framework.XSA_RC_OK; // return code
//        String err = null;                // error description
//
//        // TODO: Update the entity with ID taken from XSA_SetIdHash with the data from XSA_SetKwdsHash.
//        //       If an error occurs put the error description in err.
//
//        // error handling
//        if (err != null) {
//            XSA_Framework.XSA_WriteMessage("Error: " + err);
//            rc = XSA_Framework.XSA_RC_ERROR;
//        }
//
//        // send a debug message when exiting the function
//        XSA_Framework.XSA_WriteDebugExit(XSA_Framework.XSA_DEBUG_DETAIL, function,rc);
//        return rc;
//    }
//
//    /*   @@@CONTAINER_UPDATE_IMPLEMENTATION_END@@@    */
//
//    /*   @@@CONTAINER_DELETE_IMPLEMENTATION_START@@@    */
//    /**
//     *   Function name : ContainerDelete
//     *   Description   : Deletes a Container from the Managed System
//     */
//    public static int ContainerDelete(Hashtable[] IN_hashes)
//    {
//
//        String function = "ContainerDelete"; // for debug messages
//        Hashtable XSA_OperationHash = IN_hashes[XSA_Framework.XSA_OPERATION_HASH];
//        Hashtable XSA_ContextHash   = IN_hashes[XSA_Framework.XSA_CONTEXT_HASH];
//        Hashtable XSA_SetIdHash     = IN_hashes[XSA_Framework.XSA_SET_ID_HASH];
//        Hashtable XSA_SetKwdsHash   = IN_hashes[XSA_Framework.XSA_SET_KWDS_HASH];
//
//        // send a debug message when entering the function
//        XSA_Framework.XSA_WriteDebugEnter(XSA_Framework.XSA_DEBUG_DETAIL,function);
//
//        // send a debug message with the contents of the relevant hashtables
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_OperationHash", XSA_OperationHash);
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_ContextHash",   XSA_ContextHash);
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_SetIdHash",     XSA_SetIdHash);
//        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_SetKwdsHash",   XSA_SetKwdsHash);
//
//        int rc = XSA_Framework.XSA_RC_OK; // return code
//        String err = null;                // error description
//
//        // TODO: Delete the entity with ID taken from XSA_SetIdHash.
//        //       If an error occurs put the error description in err.
//
//        // error handling
//        if (err != null) {
//            XSA_Framework.XSA_WriteMessage("Error: " + err);
//            rc = XSA_Framework.XSA_RC_ERROR;
//        }
//
//        // send a debug message when exiting the function
//        XSA_Framework.XSA_WriteDebugExit(XSA_Framework.XSA_DEBUG_DETAIL, function,rc);
//        return rc;
//    }
//    /*   @@@CONTAINER_DELETE_IMPLEMENTATION_END@@@    */
//
//    /*   @@@IS_ACCOUNT_IN_CONTAINER_IMPLEMENTATION_START@@@    */
//    /**
//     *   Function name : IsAccountInContainer
//     *   Description   : Checks if a particular Account belongs to a given Container or to one of its subcontainers
//     */
//     public static int IsAccountInContainer(Hashtable[] IN_hashes)
//     {
//         String function = "IsAccountInContainer"; // for debug messages
//         Hashtable XSA_OperationHash = IN_hashes[XSA_Framework.XSA_OPERATION_HASH];
//         Hashtable XSA_ContextHash = IN_hashes[XSA_Framework.XSA_CONTEXT_HASH];
//         Hashtable XSA_SetIdHash = IN_hashes[XSA_Framework.XSA_SET_ID_HASH];
//         Hashtable XSA_SetKwdsHash = IN_hashes[XSA_Framework.XSA_SET_KWDS_HASH];
//
//         // send a debug message when entering the function
//         XSA_Framework.XSA_WriteDebugEnter(XSA_Framework.XSA_DEBUG_DETAIL,function);
//
//         // send a debug message with the contents of the relevant hashtables
//         XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_OperationHash", XSA_OperationHash);
//         XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_ContextHash", XSA_ContextHash);
//         XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_SetIdHash", XSA_SetIdHash);
//         XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_SetKwdsHash", XSA_SetKwdsHash);
//
//         int rc = XSA_Framework.XSA_RC_OK; // return code
//
//         //todo:
//
//        // send a debug message when exiting the function
//        XSA_Framework.XSA_WriteDebugExit(XSA_Framework.XSA_DEBUG_DETAIL,function,rc);
//        return rc;
//     }
//     /*   @@@IS_ACCOUNT_IN_CONTAINER_IMPLEMENTATION_END@@@    */
//
//    /*   @@@IS_GROUP_IN_CONTAINER_IMPLEMENTATION_START@@@    */
//
//    /**
//     *   Function name : IsGroupInContainer
//     *   Description   : Checks if a particular Group belongs to a given Container or one of its subcontainers
//     */
//    public static int IsGroupInContainer(Hashtable[] IN_hashes)
//     {
//         String function = "IsGroupInContainer"; // for debug messages
//         Hashtable XSA_OperationHash = IN_hashes[XSA_Framework.XSA_OPERATION_HASH];
//         Hashtable XSA_ContextHash = IN_hashes[XSA_Framework.XSA_CONTEXT_HASH];
//         Hashtable XSA_SetIdHash = IN_hashes[XSA_Framework.XSA_SET_ID_HASH];
//         Hashtable XSA_SetKwdsHash = IN_hashes[XSA_Framework.XSA_SET_KWDS_HASH];
//
//         // send a debug message when entering the function
//         XSA_Framework.XSA_WriteDebugEnter(XSA_Framework.XSA_DEBUG_DETAIL,function);
//
//         // send a debug message with the contents of the relevant hashtables
//         XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_OperationHash", XSA_OperationHash);
//         XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_ContextHash", XSA_ContextHash);
//         XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_SetIdHash", XSA_SetIdHash);
//         XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_SetKwdsHash", XSA_SetKwdsHash);
//
//         int rc = XSA_Framework.XSA_RC_OK; // return code
//           //todo:
//
//        // send a debug message when exiting the function
//        XSA_Framework.XSA_WriteDebugExit(XSA_Framework.XSA_DEBUG_DETAIL,function,rc);
//        return rc;
//
//     }
//
//     /*   @@@IS_GROUP_IN_CONTAINER_IMPLEMENTATION_END@@@    */
//
//    /*   @@@IS_CONTAINER_IN_CONTAINER_IMPLEMENTATION_START@@@    */
//    /**
//     *   Function name : IsContainerInContainer
//     *   Description   : Checks if a particular Container belongs to a given parent
//     *                   Container or one of its subcontainers
//     */
//     public static int IsContainerInContainer(Hashtable[] IN_hashes)
//     {
//          String function = "IsContainerInContainer"; // for debug messages
//         Hashtable XSA_OperationHash = IN_hashes[XSA_Framework.XSA_OPERATION_HASH];
//         Hashtable XSA_ContextHash = IN_hashes[XSA_Framework.XSA_CONTEXT_HASH];
//         Hashtable XSA_SetIdHash = IN_hashes[XSA_Framework.XSA_SET_ID_HASH];
//         Hashtable XSA_SetKwdsHash = IN_hashes[XSA_Framework.XSA_SET_KWDS_HASH];
//
//         // send a debug message when entering the function
//         XSA_Framework.XSA_WriteDebugEnter(XSA_Framework.XSA_DEBUG_DETAIL,function);
//
//         // send a debug message with the contents of the relevant hashtables
//         XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_OperationHash", XSA_OperationHash);
//         XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_ContextHash", XSA_ContextHash);
//         XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_SetIdHash", XSA_SetIdHash);
//         XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_SetKwdsHash", XSA_SetKwdsHash);
//
//         int rc = XSA_Framework.XSA_RC_OK; // return code
//
//        //todo:
//
//        // send a debug message when exiting the function
//        XSA_Framework.XSA_WriteDebugExit(XSA_Framework.XSA_DEBUG_DETAIL,function,rc);
//        return rc;
//
//     }
//     /*   @@@IS_CONTAINER_IN_CONTAINER_IMPLEMENTATION_END@@@    */
//
//	 /*   @@@RESOURCE_GET_IMPLEMENTATION_START@@@    */
//	 /**
//	  * Function name : ResourceGet
//	  * Description   : Retrieves Resource from the Managed System
//	 */
//	     public static int ResourceGet(Hashtable[] IN_hashes) {
//	         String function = "ResourceGet"; // for debug messages
//	         Hashtable XSA_OperationHash = IN_hashes[XSA_Framework.XSA_OPERATION_HASH];
//	         Hashtable XSA_ContextHash = IN_hashes[XSA_Framework.XSA_CONTEXT_HASH];
//	         Hashtable XSA_GetSearchHash = IN_hashes[XSA_Framework.XSA_GET_SEARCH_HASH];
//	         Hashtable XSA_GetEntityHash = IN_hashes[XSA_Framework.XSA_GET_ENTITY_HASH];
//
//
//	         // send a debug message when entering the function
//	         XSA_Framework.XSA_WriteDebugEnter(XSA_Framework.XSA_DEBUG_DETAIL, function);
//
//	         // send a debug message with the contents of the relevant hashtables
//	         XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_OperationHash", XSA_OperationHash);
//	         XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_ContextHash", XSA_ContextHash);
//	         XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_GetSearchHash", XSA_GetSearchHash);
//
//	         int rc = XSA_Framework.XSA_RC_OK; // return code
//
//	         //The following line is used for testing purposes of the action context
//	         XSA_ContextHash.put(XSA_Framework.XSA_CONTEXT_ACTION_STR, "ResourceGet Action Context Testing");
//
//	         ///////////////////////////////////////////////////////////////////////////////////////////
//	         // Retrieve the entities in the Managed System that match the search criteria in XSA_GetSearchHash.
//	         ///////////////////////////////////////////////////////////////////////////////////////////
//	         try
//	         {
//	             //Testing the session context and system contexts
//	             //XSA_Framework.XSA_WriteDebug(XSA_Framework.XSA_DEBUG_DETAIL, "Session context:" + ((TDB_SampleObject) (XSA_ContextHash.get(XSA_Framework.XSA_CONTEXT_SESSION_STR))).getPath());
//	             //XSA_Framework.XSA_WriteDebug(XSA_Framework.XSA_DEBUG_DETAIL, "System  context:" + ((TDB_SampleObject) (XSA_ContextHash.get(XSA_Framework.XSA_CONTEXT_SYSTEM_STR))).getPath());
//
//	             if ("START".equals(XSA_OperationHash.get("XSA_GET_STAGE")))
//	             {
//					//You need to initialise the things in this Block of code
//					//Do not try to send data in this block
//	 				if(XSA_Framework.res_count == 0) //Do Not Change this condition
//	 				{
//	 					//You need to initialise the things in this Block of code
//	 					//Do not try to send data in this block
//	 					//We are commenting blocks from Sample Project in order to have better undestanding here
//	                 	//m_managedSystemName = XSA_OperationHash.get(XSA_Framework.XSA_OP_SYSTEM_STR).toString();
//	 	                //m_resource = new TDB_Resource(m_managedSystemName);
//
//	         	        String filter = (String) XSA_OperationHash.get("XSA_FILTER_TYPE");
//	 					XSA_Framework.XSA_WriteDebug(XSA_Framework.XSA_DEBUG_DETAIL, "scope is : " + filter);
//
//	 	                if (("MANY".equals(filter)) && (XSA_GetSearchHash.get("XSA_RESOURCE_NAME") != null))
//	 			 		{
//	                 	    ;//Do Nothing
//	                  	}
//
//	 					String Temp = (String) XSA_GetSearchHash.get("XSA_RESOURCE_NAME");
//	 					if((Temp != null) && (!(Temp.equals("*.*")))) //*.* will fetch all the resources for a  given resource type - Do Not Change this block
//	 					{
//	 						XSA_Framework.XSA_WriteDebug(XSA_Framework.XSA_DEBUG_DETAIL, "Temp: " + Temp);
//	 						//m_resource.resourceName = Temp;
//	 						XSA_Framework.nSignle++;
//	 					}
//
//	 					//XSA_Framework.XSA_WriteDebug(XSA_Framework.XSA_DEBUG_DETAIL, "Criteria: " + m_resource.resourceName);
//
//	                	//m_resource.GetInit();
//	 				}
//
//	 				XSA_Framework.res_count++; //This Logic will not allow Re-Initialisation when the ResourceGet is called after each set of AceGet
//	             }				   				//Hence, Do not Change this Line
//
//	             if ("END".equals(XSA_OperationHash.get("XSA_GET_STAGE")))//Keep this block
//	             {
//	                 //m_resource.GetTerm();
//	                 //m_resource = null;
//	 				 XSA_Framework.res_count = 0; //Do Not Change Line in the Block
//	             }
//
//	             else
//	             {
//	                 for (int i = 0; i < XSA_Framework.maxResources; i++) //Do Not Change this condition of Iteration
//	                 {
//	 		    		//You need to send data in this Block - Only 1 Entity Should be sent in each call of loop
//	 		    		//We are commenting blocks from Sample Project in order to have better undestanding here
//	 		   			//if (m_resource.GetNext())
//	 		   			if (true)
//	                     {
//	 						 // get stage is START or NEXT
//	                         // write the entity data to the output
//	                         //XSA_GetEntityHash.put("XSA_RESOURCE_NAME", m_resource.resourceName);
//	                         //XSA_GetEntityHash.put("CCC_RESOURCE_PHONES", m_resource.phoneno);
//	 						 //XSA_GetEntityHash.put("CCC_RESOURCE_COMMENT", m_resource.comment);
//
//	 						XSA_Framework.resource_type = (String) XSA_GetSearchHash.get("XSA_RESOURCE_TYPE");//Do Not Change This in order to
//	 						//allow AceGet to obtain the values of ResourceName & ResourceType
//
//	 						XSA_GetEntityHash.put("XSA_RESOURCE_TYPE", XSA_Framework.resource_type);
//
//	 						//XSA_Framework.resource_name = m_resource.resourceName; //Fill XSA_Framework.resource_name depending on your implemetation
//
//	                         rc = XSA_Framework.XSA_WriteEntity();
//
//	                         if (rc != XSA_Framework.XSA_RC_OK)
//	                             break;
//
//	                         // assume more entities are pending
//	                         if (!"SINGLE".equals(XSA_OperationHash.get("XSA_FILTER_TYPE")))
//	                             rc = XSA_Framework.XSA_RC_MORE;
//
//	 						 if(XSA_Framework.nSignle > 0) //Do Not Change This Block - This allows Single ResourceGet
//	             			{
//								rc = XSA_Framework.XSA_RC_OK;
//								XSA_Framework.nSignle = 0;
//								XSA_Framework.res_count = 0;
//	 						}
//
//	                     }
//	                     else
//	                     {
//	                         rc = XSA_Framework.XSA_RC_OK;
//	                         if ("START".equals(XSA_OperationHash.get("XSA_GET_STAGE")))
//	                         {
//	                             //m_resource.GetTerm();
//	                             //m_resource = null;
//	                         }
//
//							XSA_Framework.res_count = 0; //Do Not Change This - - This allows Single ResourceGet
//							break;
//	                     }
//	                 }
//
//	             }
//	         }
//	         catch (Throwable e)
//	         {
//	 	    	// error handling
//	             XSA_Framework.ExceptionDescribe(e);
//	             XSA_Framework.XSA_WriteMessage("Exception: " + e.toString());
//	             rc = XSA_Framework.XSA_RC_ERROR;
//	             //m_resource = null;
//	         }
//
//	 		// send the functions output to debug
//	         XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_GetEntityHash", XSA_GetEntityHash);
//
//	         // send a debug message when exiting the function
//	         XSA_Framework.XSA_WriteDebugExit(XSA_Framework.XSA_DEBUG_DETAIL, function, rc);
//	         return rc;
//	 }
//
//	 /*   @@@RESOURCE_GET_IMPLEMENTATION_END@@@    */
//
//
//     /*   @@@RESOURCE_UPDATE_IMPLEMENTATION_START@@@    */
//	 /**
//	  * Function name : ResourceUpdate
//	  * Description   : Updates the details of an existing Resource on the Managed System
//	  */
//	 public static int ResourceUpdate(Hashtable[] IN_hashes) {
//
//		 String function = "ResourceUpdate"; // for debug messages
//		 Hashtable XSA_OperationHash = IN_hashes[XSA_Framework.XSA_OPERATION_HASH];
//		 Hashtable XSA_ContextHash   = IN_hashes[XSA_Framework.XSA_CONTEXT_HASH];
//		 Hashtable XSA_SetIdHash     = IN_hashes[XSA_Framework.XSA_SET_ID_HASH];
//		 Hashtable XSA_SetKwdsHash   = IN_hashes[XSA_Framework.XSA_SET_KWDS_HASH];
//
//		 // send a debug message when entering the function
//		 XSA_Framework.XSA_WriteDebugEnter(XSA_Framework.XSA_DEBUG_DETAIL,function);
//
//		 // send a debug message with the contents of the relevant hashtables
//		 XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_OperationHash", XSA_OperationHash);
//		 XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_ContextHash",   XSA_ContextHash);
//		 XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_SetIdHash",     XSA_SetIdHash);
//		 XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_SetKwdsHash",   XSA_SetKwdsHash);
//
//		 int rc = XSA_Framework.XSA_RC_OK; // return code
//		 String err = null;                // error description
//
//		 // TODO: Update the entity with ID taken from XSA_SetIdHash with the data from XSA_SetKwdsHash.
//		 //       If an error occurs put the error description in err.
//
//		 // error handling
//		 if (err != null) {
//			 XSA_Framework.XSA_WriteMessage("Error: " + err);
//			 rc = XSA_Framework.XSA_RC_ERROR;
//		 }
//
//		 // send a debug message when exiting the function
//	     XSA_Framework.XSA_WriteDebugExit(XSA_Framework.XSA_DEBUG_DETAIL, function,rc);
//	     return rc;
//
//	 }
//
//     /*   @@@RESOURCE_UPDATE_IMPLEMENTATION_END@@@    */
//
//
//     /*   @@@RESOURCE_ADD_IMPLEMENTATION_START@@@    */
//	 /**
//	 * Function name : ResourceAdd
//     * Description   : Creates a new Resource on the Managed System
//	 */
//	 public static int ResourceAdd(Hashtable[] IN_hashes) {
//
//		 String function = "ResourceAdd"; // for debug messages
//		 Hashtable XSA_OperationHash = IN_hashes[XSA_Framework.XSA_OPERATION_HASH];
//		 Hashtable XSA_ContextHash   = IN_hashes[XSA_Framework.XSA_CONTEXT_HASH];
//		 Hashtable XSA_SetIdHash     = IN_hashes[XSA_Framework.XSA_SET_ID_HASH];
//		 Hashtable XSA_SetKwdsHash   = IN_hashes[XSA_Framework.XSA_SET_KWDS_HASH];
//
//		 // send a debug message when entering the function
//		 XSA_Framework.XSA_WriteDebugEnter(XSA_Framework.XSA_DEBUG_DETAIL,function);
//
//		 // send a debug message with the contents of the relevant hashtables
//		 XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_OperationHash", XSA_OperationHash);
//		 XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_ContextHash",   XSA_ContextHash);
//		 XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_SetIdHash",     XSA_SetIdHash);
//		 XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_SetKwdsHash",   XSA_SetKwdsHash);
//
//		 int rc = XSA_Framework.XSA_RC_OK; // return code
//		 String err = null;                // error description
//
//		 // TODO: Create a new entity with ID taken from XSA_SetIdHash and data from XSA_SetKwdsHash.
//		 //       If an error occurs put the error description in err.
//
//		 // error handling
//		 if (err != null) {
//			 XSA_Framework.XSA_WriteMessage("Error: " + err);
//			 rc = XSA_Framework.XSA_RC_ERROR;
//		 }
//
//		 // send a debug message when exiting the function
//		 XSA_Framework.XSA_WriteDebugExit(XSA_Framework.XSA_DEBUG_DETAIL, function,rc);
//		 return rc;
//    }
//
//	 /*   @@@RESOURCE_ADD_IMPLEMENTATION_END@@@    */
//
//
//	 /*   @@@RESOURCE_DELETE_IMPLEMENTATION_START@@@    */
//	 /**
//	  * Function name : ResourceDelete
//	  * Description   : Deletes a Resource from the Managed System
//	  */
//	 public static int ResourceDelete(Hashtable[] IN_hashes) {
//
//
//		 String function = "ResourceDelete"; // for debug messages
//		 Hashtable XSA_OperationHash = IN_hashes[XSA_Framework.XSA_OPERATION_HASH];
//		 Hashtable XSA_ContextHash   = IN_hashes[XSA_Framework.XSA_CONTEXT_HASH];
//		 Hashtable XSA_SetIdHash     = IN_hashes[XSA_Framework.XSA_SET_ID_HASH];
//		 Hashtable XSA_SetKwdsHash   = IN_hashes[XSA_Framework.XSA_SET_KWDS_HASH];
//
//		 // send a debug message when entering the function
//		 XSA_Framework.XSA_WriteDebugEnter(XSA_Framework.XSA_DEBUG_DETAIL,function);
//
//		 // send a debug message with the contents of the relevant hashtables
//		 XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_OperationHash", XSA_OperationHash);
//		 XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_ContextHash",   XSA_ContextHash);
//		 XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_SetIdHash",     XSA_SetIdHash);
//		 XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_SetKwdsHash",   XSA_SetKwdsHash);
//
//		 int rc = XSA_Framework.XSA_RC_OK; // return code
//		 String err = null;                // error description
//
//		 // TODO: Delete the entity with ID taken from XSA_SetIdHash.
//		 //       If an error occurs put the error description in err.
//
//		 // error handling
//		 if (err != null) {
//		    XSA_Framework.XSA_WriteMessage("Error: " + err);
//		    rc = XSA_Framework.XSA_RC_ERROR;
//		 }
//
//		 // send a debug message when exiting the function
//		 XSA_Framework.XSA_WriteDebugExit(XSA_Framework.XSA_DEBUG_DETAIL, function,rc);
//		 return rc;
//	}
//
//    /*   @@@RESOURCE_DELETE_IMPLEMENTATION_END@@@    */
//
//
//    /*   @@@RESOURCEACL_GET_IMPLEMENTATION_START@@@    */
//	/**
//	  * Function name : AceGet
//	  * Description   : Retrieves ResourceACL from the Managed System for a Given Resource & ResourceType
//	*/
//	    public static int AceGet(Hashtable[] IN_hashes) {
//	        String function = "AceGet"; // for debug messages
//	        Hashtable XSA_OperationHash = IN_hashes[XSA_Framework.XSA_OPERATION_HASH];
//	        Hashtable XSA_ContextHash = IN_hashes[XSA_Framework.XSA_CONTEXT_HASH];
//	        Hashtable XSA_GetSearchHash = IN_hashes[XSA_Framework.XSA_GET_SEARCH_HASH];
//	        Hashtable XSA_GetEntityHash = IN_hashes[XSA_Framework.XSA_GET_ENTITY_HASH];
//
//
//	        // send a debug message when entering the function
//	        XSA_Framework.XSA_WriteDebugEnter(XSA_Framework.XSA_DEBUG_DETAIL, function);
//
//	        // send a debug message with the contents of the relevant hashtables
//	        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_OperationHash", XSA_OperationHash);
//	        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_ContextHash", XSA_ContextHash);
//	        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_GetSearchHash", XSA_GetSearchHash);
//
//	        int rc = XSA_Framework.XSA_RC_OK; // return code
//
//			//The following line is used for testing purposes of the action context
//	        XSA_ContextHash.put(XSA_Framework.XSA_CONTEXT_ACTION_STR, "ResourceACLGet Action Context Testing");
//			XSA_Framework.XSA_WriteDebug(XSA_Framework.XSA_DEBUG_DETAIL, "resource_type = :" + XSA_Framework.resource_type);
//			XSA_Framework.XSA_WriteDebug(XSA_Framework.XSA_DEBUG_DETAIL, "resource_name = :" + XSA_Framework.resource_name);
//
//
//	        ///////////////////////////////////////////////////////////////////////////////////////////
//	        // Retrieve the entities in the Managed System that match the search criteria in XSA_GetSearchHash.
//	        ///////////////////////////////////////////////////////////////////////////////////////////
//	        try
//	        {
//	            //Testing the session context and system contexts
//	            //XSA_Framework.XSA_WriteDebug(XSA_Framework.XSA_DEBUG_DETAIL, "Session context:" + ((TDB_SampleObject) (XSA_ContextHash.get(XSA_Framework.XSA_CONTEXT_SESSION_STR))).getPath());
//	            //XSA_Framework.XSA_WriteDebug(XSA_Framework.XSA_DEBUG_DETAIL, "System  context:" + ((TDB_SampleObject) (XSA_ContextHash.get(XSA_Framework.XSA_CONTEXT_SYSTEM_STR))).getPath());
//
//	            if ("START".equals(XSA_OperationHash.get("XSA_GET_STAGE")))
//	            {
//		       		//Use This Block for Initialisation
//		       		//Do Not Send Data in This Block
//		       		//We are just commenting the lines here in order to have better understanding here
//
//		       		//m_managedSystemName = XSA_OperationHash.get(XSA_Framework.XSA_OP_SYSTEM_STR).toString();
//		       		//m_resourceACL = new TDB_ResourceACL(m_managedSystemName);
//
//					//m_resourceACL.resourceName = XSA_Framework.resource_name; //Put this value got in ResourceGet in ResourceName Taregt Variable depending on implemetation
//					//m_resourceACL.resourceType = XSA_Framework.resource_type;  //Put this valuegot in ResourceGet in ResourceType Taregt Variable depending on implemetation
//					//m_resourceACL.aceName = null; //depends on implemetation
//
//					//m_resourceACL.GetInit();
//
//	            }
//
//	            if ("END".equals(XSA_OperationHash.get("XSA_GET_STAGE")))
//	            {
//					//We are just commenting the lines here in order to have better understanding here
//		        	//m_resourceACL.GetTerm();
//	                //m_resourceACL = null;
//	            }
//	            else
//	            {
//					for (int i = 0; i < XSA_Framework.maxResourcesACL; i++) //Do not change the condition of Iteration
//	                {
//			       		//You need to send data in this Block - Only 1 Entity Should be sent in each call of loop
//			       		//We are just commenting the lines here in order to have better understanding here
//						//if(m_resourceACL.GetNext())
//						//{
//							//XSA_GetEntityHash.put("XSA_ACE_USER_NAME", m_resourceACL.aceName);
//							//XSA_GetEntityHash.put("XSA_ACE_TYPE", XSA_Framework.RESOURCE_ACL_TYPE.ACE_TYPE_USER); // Decide the value for this depending on implemetation
//							//XSA_GetEntityHash.put("XSA_ACE_ATTR", XSA_Framework.RESOURCE_ACL_ATTRIBUTE.ACE_ATTR_REGULAR);// Decide the value for this depending on implemetation
//							//XSA_GetEntityHash.put("XSA_ACE_RESNAME", m_resourceACL.resourceName);//This is OUT-OF-THE-BOX implemetation for letting the ESS entry know the values for
//							//XSA_GetEntityHash.put("XSA_ACE_RESTYPE",m_resourceACL.resourceType);//ResouceName & ResourceType => Always have these keywords for ACE & fill their values in each Get
//							//XSA_GetEntityHash.put("CCC_ACE_COMMENT","COMMENT");
//							//rc = XSA_Framework.XSA_WriteEntity();
//							rc = XSA_Framework.XSA_RC_MORE;
//						//}
//
//						//else
//						//{
//							rc = XSA_Framework.XSA_RC_OK;
//						//}
//	                }
//	            }
//	        }
//	        catch (Throwable e)
//	        {
//		   		// error handling
//	            XSA_Framework.ExceptionDescribe(e);
//	            XSA_Framework.XSA_WriteMessage("Exception: " + e.toString());
//	            rc = XSA_Framework.XSA_RC_ERROR;
//	            //m_resourceACL = null;
//	        }
//
//			// send the functions output to debug
//	        XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_GetEntityHash", XSA_GetEntityHash);
//
//	        // send a debug message when exiting the function
//	        XSA_Framework.XSA_WriteDebugExit(XSA_Framework.XSA_DEBUG_DETAIL, function, rc);
//	        return rc;
//		}
//		 /*   @@@RESOURCEACL_GET_IMPLEMENTATION_END@@@    */
//
//
//		/*   @@@RESOURCEACL_ADD_IMPLEMENTATION_START@@@    */
//		/**
//		* Function name : AceAdd
//		* Description   : Adds ACL to the Resource for a Given Resource & ResourceType
//		*/
//		 public static int AceAdd(Hashtable[] IN_hashes) {
//		         String function = "AceAdd"; // for debug messages
//		         Hashtable XSA_OperationHash = IN_hashes[XSA_Framework.XSA_OPERATION_HASH];
//		         Hashtable XSA_ContextHash = IN_hashes[XSA_Framework.XSA_CONTEXT_HASH];
//		         Hashtable XSA_SetIdHash = IN_hashes[XSA_Framework.XSA_SET_ID_HASH];
//		         Hashtable XSA_SetKwdsHash = IN_hashes[XSA_Framework.XSA_SET_KWDS_HASH];
//
//		         // send a debug message when entering the function
//		         XSA_Framework.XSA_WriteDebugEnter(XSA_Framework.XSA_DEBUG_DETAIL, function);
//
//		         // send a debug message with the contents of the relevant hashtables
//		         XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_OperationHash", XSA_OperationHash);
//		         XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_ContextHash", XSA_ContextHash);
//		         XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_SetIdHash", XSA_SetIdHash);
//		         XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_SetKwdsHash", XSA_SetKwdsHash);
//
//		         int rc = XSA_Framework.XSA_RC_OK; // return code
//
//		 		 //The following line is used for testing purposes of the action context
//		         XSA_ContextHash.put(XSA_Framework.XSA_CONTEXT_ACTION_STR, "ResourceACLAdd Action Context Testing");
//
//
//
//		         ///////////////////////////////////////////////////////////////////////////////////////////
//		         //Adds ACL to the Resource for a Given Resource & ResourceType -
//		         //Create a new entity with ID taken from XSA_SetIdHash and data from XSA_SetKwdsHash.
//		         ///////////////////////////////////////////////////////////////////////////////////////////
//		         try
//		         {
//		             //Testing the session context and system contexts
//		             //XSA_Framework.XSA_WriteDebug(XSA_Framework.XSA_DEBUG_DETAIL, "Session context:" + ((TDB_SampleObject) (XSA_ContextHash.get(XSA_Framework.XSA_CONTEXT_SESSION_STR))).getPath());
//		             //XSA_Framework.XSA_WriteDebug(XSA_Framework.XSA_DEBUG_DETAIL, "System  context:" + ((TDB_SampleObject) (XSA_ContextHash.get(XSA_Framework.XSA_CONTEXT_SYSTEM_STR))).getPath());
//
//		            {
//						//We are just commenting the lines here in order to have better understanding here
//		 				//m_managedSystemName = XSA_OperationHash.get(XSA_Framework.XSA_OP_SYSTEM_STR).toString();
//		             	//m_resourceACL = new TDB_ResourceACL(m_managedSystemName);
//
//		            	//m_resourceACL.resourceName = (String) XSA_SetKwdsHash.get("XSA_ACE_RESNAME");//Always Have relevent keywords for storing
//		             	//m_resourceACL.resourceType = (String) XSA_SetKwdsHash.get("XSA_ACE_RESTYPE");//ResourceName & ResourceType
//		             	//m_resourceACL.aceName = (String) XSA_SetKwdsHash.get("XSA_ACE_USER_NAME");
//
//						//XSA_Framework.resource_type = (String) XSA_SetKwdsHash.get("XSA_ACE_RESTYPE");//These two are compulsory Steps
// 						//XSA_Framework.resource_name = (String) XSA_SetKwdsHash.get("XSA_ACE_RESNAME");//Fill XSA_Framework.resource_name & XSA_Framework.resource_type
//																		   					          //With relevent values
//
//		 				//m_resourceACL.Add();
//
//		             }
//
//
//		         }
//		         catch (Throwable e)
//		         {
//		 	   		 // error handling
//		             XSA_Framework.ExceptionDescribe(e);
//		             XSA_Framework.XSA_WriteMessage("Exception: " + e.toString());
//		             rc = XSA_Framework.XSA_RC_ERROR;
//
//		         }finally{
//		             //m_resourceACL = null;
//		         }
//
//		         // send a debug message when exiting the function
//		         XSA_Framework.XSA_WriteDebugExit(XSA_Framework.XSA_DEBUG_DETAIL, function, rc);
//		         return rc;
//	}
//	/*   @@@RESOURCEACL_ADD_IMPLEMENTATION_END@@@    */
//
//	/*   @@@RESOURCEACL_ADD_IMPLEMENTATION_END@@@    */
//
//	/*   @@@RESOURCEACL_UPDATE_IMPLEMENTATION_START@@@    */
//	/**
//	 * Function name : AceUpdate
//	 * Description   : Updates the details of an existing ResourceACL on the Managed System
//	 */
//	public static int AceUpdate(Hashtable[] IN_hashes) {
//
//		String function = "AceUpdate"; // for debug messages
//		Hashtable XSA_OperationHash = IN_hashes[XSA_Framework.XSA_OPERATION_HASH];
//		Hashtable XSA_ContextHash = IN_hashes[XSA_Framework.XSA_CONTEXT_HASH];
//		Hashtable XSA_SetIdHash = IN_hashes[XSA_Framework.XSA_SET_ID_HASH];
//		Hashtable XSA_SetKwdsHash = IN_hashes[XSA_Framework.XSA_SET_KWDS_HASH];
//
//		// send a debug message when entering the function
//		XSA_Framework.XSA_WriteDebugEnter(XSA_Framework.XSA_DEBUG_DETAIL, function);
//
//		// send a debug message with the contents of the relevant hashtables
//		XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_OperationHash", XSA_OperationHash);
//		XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_ContextHash", XSA_ContextHash);
//		XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_SetIdHash", XSA_SetIdHash);
//		XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_SetKwdsHash", XSA_SetKwdsHash);
//
//		int rc = XSA_Framework.XSA_RC_OK; // return code
//
//		///////////////////////////////////////////////////////////////////////////////////////////
//		// Update the entity with ID taken from XSA_SetIdHash with the data from XSA_SetKwdsHash.
//		///////////////////////////////////////////////////////////////////////////////////////////
//		try {
//				//We are just commenting the lines here in order to have better understanding here
//
//				//m_managedSystemName = XSA_OperationHash.get(XSA_Framework.XSA_OP_SYSTEM_STR).toString();
//				//m_resourceACL = new TDB_ResourceACL(m_managedSystemName);
//
//				//m_resourceACL.resourceType = (String) XSA_SetKwdsHash.get("XSA_ACE_RESTYPE");
//				//m_resourceACL.resourceName = (String) XSA_SetKwdsHash.get("XSA_ACE_RESNAME");
//				//m_resourceACL.aceName = (String) XSA_SetKwdsHash.get("XSA_ACE_USER_NAME");
//
//				//XSA_Framework.resource_type = (String) XSA_SetKwdsHash.get("XSA_ACE_RESTYPE");//These two are compulsory Steps
//		 		//XSA_Framework.resource_name = (String) XSA_SetKwdsHash.get("XSA_ACE_RESNAME");//Fill XSA_Framework.resource_name & XSA_Framework.resource_type
//																		   					   //With relevent values
//
//				//m_resourceACL.Update();
//
//				rc = XSA_Framework.XSA_RC_OK;
//
//		} catch (Throwable e) { // error handling
//			XSA_Framework.ExceptionDescribe(e);
//			XSA_Framework.XSA_WriteMessage("Exception: " + e.toString());
//			rc = XSA_Framework.XSA_RC_ERROR;
//		} finally {
//			//m_resourceACL = null;
//		}
//		///////////////////////////////////////////////////////////////////////////////////////////
//
//		// send a debug message when exiting the function
//		XSA_Framework.XSA_WriteDebugExit(XSA_Framework.XSA_DEBUG_DETAIL, function, rc);
//		return rc;
//	}
// 	/*   @@@RESOURCEACL_UPDATE_IMPLEMENTATION_END@@@    */
//
// 	/*   @@@RESOURCEACL_DELETE_IMPLEMENTATION_START@@@    */
// 	/**
// 	* Function name : AceDelete
// 	* Description   : Deletes a Resource from the Managed System
// 	*/
// 	public static int AceDelete(Hashtable[] IN_hashes) {
//
//         String function = "AceDelete"; // for debug messages
//         Hashtable XSA_OperationHash = IN_hashes[XSA_Framework.XSA_OPERATION_HASH];
//         Hashtable XSA_ContextHash = IN_hashes[XSA_Framework.XSA_CONTEXT_HASH];
//         Hashtable XSA_SetIdHash = IN_hashes[XSA_Framework.XSA_SET_ID_HASH];
//         Hashtable XSA_SetKwdsHash = IN_hashes[XSA_Framework.XSA_SET_KWDS_HASH];
//
//         // send a debug message when entering the function
//         XSA_Framework.XSA_WriteDebugEnter(XSA_Framework.XSA_DEBUG_DETAIL, function);
//
//         // send a debug message with the contents of the relevant hashtables
//         XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_OperationHash", XSA_OperationHash);
//         XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_ContextHash", XSA_ContextHash);
//         XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_SetIdHash", XSA_SetIdHash);
//         XSA_Framework.XSA_DebugHash(XSA_Framework.XSA_DEBUG_DETAIL, "XSA_SetKwdsHash", XSA_SetKwdsHash);
//
//         int rc = XSA_Framework.XSA_RC_OK; // return code
//
//
//         ///////////////////////////////////////////////////////////////////////////////////////////
//         // Delete the entity with ID taken from XSA_SetIdHash.
//         ///////////////////////////////////////////////////////////////////////////////////////////
//         try {
//
//			 	//We are just commenting the lines here in order to have better understanding here
// 				//m_managedSystemName = XSA_OperationHash.get(XSA_Framework.XSA_OP_SYSTEM_STR).toString();
// 				//m_resourceACL = new TDB_ResourceACL(m_managedSystemName);
//
// 				//m_resourceACL.resourceType = (String) XSA_SetKwdsHash.get("XSA_ACE_RESTYPE");
// 				//m_resourceACL.resourceName = (String) XSA_SetKwdsHash.get("XSA_ACE_RESNAME");
// 				//m_resourceACL.aceName = (String) XSA_SetKwdsHash.get("XSA_ACE_USER_NAME");
//
// 				//XSA_Framework.resource_type = (String) XSA_SetKwdsHash.get("XSA_ACE_RESTYPE");//These two are compulsory Steps
// 				//XSA_Framework.resource_name = (String) XSA_SetKwdsHash.get("XSA_ACE_RESNAME");//Fill XSA_Framework.resource_name & XSA_Framework.resource_type
//																		   					 //With relevent values
// 				//m_resourceACL.Delete();
//
// 				rc = XSA_Framework.XSA_RC_OK;
//
//         } catch (Throwable e) { // error handling
//             XSA_Framework.ExceptionDescribe(e);
//             XSA_Framework.XSA_WriteMessage("Exception: " + e.toString());
//             rc = XSA_Framework.XSA_RC_ERROR;
//         } finally {
//             //m_resourceACL = null;
//         }
//         ///////////////////////////////////////////////////////////////////////////////////////////
//
//         // send a debug message when exiting the function
//         XSA_Framework.XSA_WriteDebugExit(XSA_Framework.XSA_DEBUG_DETAIL, function, rc);
//         return rc;
//     }
//    /*   @@@RESOURCEACL_DELETE_IMPLEMENTATION_END@@@    */
//
//} /* end class */
